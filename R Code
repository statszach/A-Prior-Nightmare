
##################################################
## BAYESIAN AND FREQUENTIST MULTIPLE REGRESSION ##
##################################################

#################################
## PHP 2530 Final Project      ##
## Last Updated: 18 April 2019 ##
## ZK continued Set-up         ##
#################################

######################
## LOADING PACKAGES ##
######################

library(psych)
library(BaylorEdPsych)
library(MissMech)
library(ggplot2)
library(BAS)
library(readxl)
library(dplyr) 


#################
## DATA SET-UP ##
#################

#Importing

ThesisSP18Data <- read_excel("~/Graduate School/URI Statistics MS/STA 599 Thesis/Thesis Analyses/ThesisSP18Data.xlsx")
S18 <- ThesisSP18Data

#Subset for beginning of semester only

S18BaselineItems <- c("QuantClassB",	"PellGrantM", "RelStaM","RelStaM_Text","OtherQuantClassB",	"GenderB",	"GenderB_Text",	"RaceEth_B",	"RaceEthB_Text",	"ExpGradeB",	"StuStaB",	"StuStaB_Text", "GPAB",	"GPAB_Text",
"QANX1B",	"QANX2B",	"QANX3B",	"QANX4B",	
"SAS1B",	"SAS2B",	"SAS3B",	"SAS4B",	"SAS5B",	"SAS6B",	"SAS7B",	"SAS8B",	"SAS9B",	"SAS10B",	"SAS11B",	"SAS12B",	"SAS13B",	"SAS14B",	"SAS15B",
"AlcoholYNB",	"AlcoholB",	"BingeYNB",	"BingeB",	
"Subsscreen1B",	"Subsscreen2B",	"Subsscreen3B",	"Subsscreen4B",	"Subsscreen5B",	"Subsscreen6B",	"Subsscreen7B",	"Subsscreen8B",	"Subsscreen9B",
"DASS1B",	"DASS2B",	"DASS3B",	"DASS4B",	"DASS5B",	"DASS6B",	"DASS7B",	
"DASS8B",	"DASS9B",	"DASS10B",	"DASS11B",	"DASS12B",	"DASS13B",	"DASS14B",	
"DASS15B", "DASS16B",	"DASS17B",	"DASS18B",	"DASS19B",	"DASS20B",	"DASS21B")

S18Baseline <- S18[S18BaselineItems]

#Omitting all fully missing observations

S18BaselineOnly <- S18Baseline[rowSums(is.na(S18Baseline)) !=ncol(S18Baseline), ]

#Demographics
## ALL NEED TO BE RECODED ##
table(S18BaselineOnly$GenderB)
table(S18BaselineOnly$RaceEthB)
table(S18BaselineOnly$OtherQuantClassB)
table(S18BaselineOnly$ExpGradeB)
table(S18BaselineOnly$StuStaB)
table(S18BaselineOnly$GPAB)
#demographic recoding 
#exclude values equal to 0 since they are missing 
S18BaselineOnly <- S18BaselineOnly[S18BaselineOnly$GenderB!=0 & S18BaselineOnly$GenderB!="Transgender", ]
#re-coding demographics 
View(S18BaselineOnly)
S18BaselineOnly$GenderB <- ifelse(S18BaselineOnly$GenderB == "Female", 0, ifelse(S18BaselineOnly$GenderB == "Male",1 ,99))

S18BaselineOnly$RaceEth_B <- ifelse(S18BaselineOnly$RaceEth_B == "White/European Descent", 1, 0)

S18BaselineOnly$PellGrantM <- ifelse(S18BaselineOnly$PellGrantM == "Yes", 1,
                              ifelse(S18BaselineOnly$PellGrantM == "No",0,99))

S18BaselineOnly$RelStaM <- ifelse(S18BaselineOnly$RelStaM == "Single",1,
                            ifelse(S18BaselineOnly$RelStaM== "In a Relationship",2,
                            ifelse(S18BaselineOnly$RelStaM == "Divorced",3,
                            ifelse(S18BaselineOnly$RelStaM == "Widowed",3,
                            ifelse(S18BaselineOnly$RelStaM == "Married Not Listed, please Fill In:",3,99)))))

S18BaselineOnly$OtherQuantClassB <- ifelse(S18BaselineOnly$OtherQuantClassB ==0,0, 
                                    ifelse(S18BaselineOnly$OtherQuantClassB =="No", 0,
                                    ifelse(S18BaselineOnly$OtherQuantClassB == "no",0,
                                    ifelse(S18BaselineOnly$OtherQuantClassB =="Hell No", 0,
                                    ifelse(S18BaselineOnly$OtherQuantClassB == "N/A", 0,
                                    ifelse(S18BaselineOnly$OtherQuantClassB == "NO", 0,   
                                    ifelse(S18BaselineOnly$OtherQuantClassB == "unknown", 0, 1)))))))

S18BaselineOnly$ExpGradeB <-ifelse(S18BaselineOnly$ExpGradeB == "A", 3, 
                            ifelse(S18BaselineOnly$ExpGradeB == "B",2,
                            ifelse(S18BaselineOnly$ExpGradeB == "C",1,0)))

S18BaselineOnly$StuStaB <-ifelse(S18BaselineOnly$StuStaB == "Freshman",1,
                          ifelse(S18BaselineOnly$StuStaB=="Sophomore",2, 
                          ifelse(S18BaselineOnly$StuStaB=="Junior",3, 
                          ifelse(S18BaselineOnly$StuStaB=="Senior",4,
                          ifelse(S18BaselineOnly$StuStaB=="Not listed, please fill in:",5,99)))))

S18BaselineOnly$GPAB_Text<- as.numeric(S18BaselineOnly$GPAB_Text)
#Replace all values  "Not listed, please fill in:" with text from GPAB_Text
select <- S18BaselineOnly$GPAB=="Not listed, please fill in:"
S18BaselineOnly[select, "GPAB"] <- S18BaselineOnly[select, "GPAB_Text"]

#Cateorize GPA
S18BaselineOnly$GPAB<- as.numeric(S18BaselineOnly$GPAB )
S18BaselineOnly$GPAB <- ifelse(S18BaselineOnly$GPAB < 2.5, 1,
                        ifelse(S18BaselineOnly$GPAB>=2.5&S18BaselineOnly$GPAB<3, 2,
                        ifelse(S18BaselineOnly$GPAB>=3 & S18BaselineOnly$GPAB <3.5, 3,
                        ifelse(S18BaselineOnly$GPAB>=3.5,4,99 ))))

#Scoring Scales 
#Remember - using RowMeans in case of any items missing within-measure

QuantAnxietyItems <- c("QANX1B",	"QANX2B",	"QANX3B",	"QANX4B")
ExamAnxietyItems <- c("SAS1B",	"SAS2B",	"SAS3B",	"SAS4B",	"SAS5B",	"SAS6B",	"SAS7B",	"SAS8B",	"SAS9B",	"SAS10B",	"SAS11B",	"SAS12B",	"SAS13B",	"SAS14B",	"SAS15B")
SAScreenerItems <- c("Subsscreen1B",	"Subsscreen2B",	"Subsscreen3B",	"Subsscreen4B",	"Subsscreen5B",	"Subsscreen6B",	"Subsscreen7B",	"Subsscreen8B",	"Subsscreen9B")
DASSStressItems <- c("DASS1B",	"DASS2B",	"DASS3B",	"DASS4B",	"DASS5B",	"DASS6B",	"DASS7B")
DASSAnxietyItems <- c("DASS15B", "DASS16B",	"DASS17B",	"DASS18B",	"DASS19B",	"DASS20B",	"DASS21B")
DASSDepressionItems <- c("DASS8B",	"DASS9B",	"DASS10B",	"DASS11B",	"DASS12B",	"DASS13B",	"DASS14B")


OtherQuantClassB,	"GenderB",	"GenderB_Text",	"RaceEth_B",	"RaceEthB_Text",	"ExpGradeB",	"StuStaB",	"StuStaB_Text", "GPAB"

finaldf <- S18BaselineOnly %>% transmute(AlcoholB, BingeB,
  QuantAnxiety = rowMeans(select(., QuantAnxietyItems)),
  ExamAnxiety = rowMeans(select(., ExamAnxietyItems)),
  SubsUseScreener = rowMeans(select(., SAScreenerItems)),                                                      
  DASS_Stress = rowMeans(select(., DASSStressItems)),
  DASS_Anxiety = rowMeans(select(., DASSAnxietyItems)),
  DASS_Depression = rowMeans(select(., DASSDepressionItems))
  Gender = S18BaselineOnly$GenderB,
  Year = S18BaselineOnly$StuStaB,
  QuantativeClass =S18BaselineOnly$OtherQuantClassB,
  Expected_Grade = S18BaselineOnly$ExpGradeB,
  Race = S18BaselineOnly$RaceEth_B, 
  GPA = S18BaselineOnly$GPAB
  Relationship = S18BaselineOnly$RelStaM 
  )


#Explore amount of data missing

#Little MCAR/Modified Hawkins Test
#MVN Test
#Impute missing data





#######################
## ASSUMPTION CHECKS ##
#######################

#check skewness/kurtosis

describe(S18BaselineOnlyScored$AlcoholB)
describe(S18BaselineOnlyScored$BingeB)
describe(S18BaselineOnlyScored$QuantAnxiety)
describe(S18BaselineOnlyScored$SubsUseScreener)
describe(S18BaselineOnlyScored$ExamAnxiety)
describe(S18BaselineOnlyScored$DASS_Stress)
describe(S18BaselineOnlyScored$DASS_Anxiety)
describe(S18BaselineOnlyScored$DASS_Depression)

############################
## DESCRIPTIVE STATISTICS ##
## AND DEMOGRAPHICS       ##
############################
#test correlation of alcohol use and anxiety 
cor(finaldf$AlcoholB, finaldf$DASS_Anxiety)

#Check distribution of outcome- alcohol use
alcohol.plot <- ggplot(finaldf, aes(x=finaldf$AlcoholB)) +
  geom_histogram(fill="green", bins = 50)+
  theme_bw()+
  labs(x = "Alcohol Use", y= "Count", title = "Distribution of Alcohol Use")

#Check distribution of explainatory variable-  Quantitative Anxiety 
quant.anxiety.plot <- ggplot(finaldf, aes(x=finaldf$QuantAnxiety)) +
  geom_histogram(fill="blue", bins =50)+
  theme_bw()+
  labs(x = "Quantitative Anxiety", y= "Count", title = "Distribution of Quantitative Anxiety")

#summary statistics for alcohol
finaldf %>% summarise(mean = round(mean(AlcoholB), 3), 
                       sd = round(sd(AlcoholB), 3), 
                       median = median(AlcoholB), 
                       IQR = IQR(AlcoholB), 
                       min = min(AlcoholB), 
                       max = max(AlcoholB))

##############Distress Variables#################
#summary statistics for alcohol
finaldf %>% summarise(mean = round(mean(AlcoholB), 3), 
                       sd = round(sd(AlcoholB), 3), 
                       median = median(AlcoholB), 
                       IQR = IQR(AlcoholB), 
                       min = min(AlcoholB), 
                       max = max(AlcoholB))
        

#summary statistics for  Quantitative Anxiety
finaldf %>% summarise(mean = round(mean(QuantAnxiety), 3), 
                      sd = round(sd(QuantAnxiety), 3), 
                      median = median(QuantAnxiety), 
                      IQR = IQR(QuantAnxiety), 
                      min = min(QuantAnxiety), 
                      max = max(QuantAnxiety),
                      skew = skewness(QuantAnxiety),
                      kurt = kurtosis(QuantAnxiety))
                      
#summary statistics for Exam Anxiety 
finaldf %>% summarise(mean = round(mean(ExamAnxiety), 3), 
                      sd = round(sd(ExamAnxiety), 3), 
                      median = median(ExamAnxiety), 
                      min = min(ExamAnxiety), 
                      max = max(ExamAnxiety),
                      skew = skewness(ExamAnxiety),
                      kurt = kurtosis(ExamAnxiety))
                      
#summary statistic for stress
finaldf %>% summarise(mean = round(mean(DASS_Stress), 3), 
                      sd = round(sd(DASS_Stress), 3), 
                      median = median(DASS_Stress), 
                      min = min(DASS_Stress), 
                      max = max(DASS_Stress),
                      skew = skewness(DASS_Stress),
                      kurt = kurtosis(DASS_Stress))
                      
#summary statistics for depression 
finaldf %>% summarise(mean = round(mean(DASS_Depression), 3), 
                      sd = round(sd(DASS_Depression), 3), 
                      median = median(DASS_Depression), 
                      min = min(DASS_Depression), 
                      max = max(DASS_Depression),
                      skew = skewness(DASS_Depression),
                      kurt = kurtosis(DASS_Depression))
                      
#summary statistics for anxiety 
finaldf %>% summarise(mean = round(mean(DASS_Anxiety), 3), 
                      sd = round(sd(DASS_Anxiety), 3), 
                      median = median(DASS_Anxiety), 
                      min = min(DASS_Anxiety), 
                      max = max(DASS_Anxiety),
                      skew = skewness(DASS_Anxiety),
                      kurt = kurtosis(DASS_Anxiety))

#age, gender, race/ethnicity frequencies
#M/SD for continuous covariates
#F/% for categorical covariates

####################
## FREQUENTIST MR ##
####################

#Run Full Model
Full.Frequentist.Model <- lm(AlcoholB ~ ., data = na.omit(finaldf))
summary(Full.Frequentist.Model)
plot(Full.Frequentist.Model)
tidy(Full.Frequentist.Model, conf.int = TRUE)[,-c(3:4)]

#Use backwards elimination to remove variables
backwards.model <- step(Full.Frequentist.Model, direction = "backward",trace = FALSE)
summary(backwards.model)
tidy(backwards.model, conf.int = TRUE)[,-c(3:4)]

#linearity 
plot(backwards.model,1)

#homogenous variance assumption tested by standardized residual plots
library(olsrr)
ols_rvsp_plot(backwards.model)
ols_score_test(backwards.model)
ols_f_test(backwards.model)

#normal distribution of errors
plot(backwards.model,2)

#mean of residuals is 0
mean(backwards.model$residuals)

#check for outliers 
ols_plot_dfbetas(backwards.model)
ols_plot_dffits(backwards.model)

#At this point, re-run reduced model, interpret results, plot for diagnostics if needed

#################
## BAYESIAN MR ##
#################

#Run Full Model. We probably want to be crystal clear why we're choosing the ZS-null and uniform priors in the paper.

Full.Bayesian.Model <- bas.lm(AlcoholB ~ .,
                              data =finaldf, 
                              method = "MCMC",
                              prior = "ZS-null",
                              modelprior = uniform())
summary(Full.Bayesian.Model)

#Use results from the summary to create the reduced model. Compare and contrast with frequentist/backwards selection results.

#At this point, re-run reduced model, interpret results, provide plots.

#Compare posterior distribution of beta values to posterior expected value of predictions 
coef_model <- coef(Full.Bayesian.Model)
par(mfrow=c(2,5))
plot(coef_model, subset = c(1,2,3,4,5,6,7,8,9,10), ask=F)

#credible intervals 
confint(coef_model)

#Test the model by seeing how to preforms when we plug in specific covariate values 

#Examine outliers by Bayesian residual analysis 

coef(model) provides beta, confint(model) provides beta and 95% credible intervals

############################
## PREDICTIVE PERFORMANCE ##
############################

#save predicted scores of F-MR and B-MR
#plot against true values of alcohol use

test <- finaldf[1,]
predict_1 <- predict(backwards.model, test, interval="predict")
alcohol_predictions <- 4
prediction_freq <- data.frame("Test Subject" = "Student 1",
                          "Predicted Alcohol Use" = sprintf("%2.1f", predict_1[1]),
                          "95% CI" = sprintf("%2.1f-%2.1f", predict_1[2], predict_1[3]),
                          "Actual Alcohol Use" = alcohol_predictions[1])
predictions

#bayesian model
predict_1 <- predict(Full.Bayesian.Model, test, estimator="BMA", interval = "predict", se.fit=TRUE)
prediction_bayes <- data.frame('Test Subject' = 'Student 1',
           'Predicted Alcohol Use' = predict_1$Ybma, 
           'Real Alcohol Use' = 4)
prediction_bayes

#could also try to fit values to second data set (F17)
